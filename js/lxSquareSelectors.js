//@ sourceMappingURL=lxSquareSelectors.map
// Generated by CoffeeScript 1.6.1
/*
    Class for visual dropdown (selectors replacement)

    Requires: jQuery 1.2+
*/

var LxSquareSelector;

LxSquareSelector = (function() {
  /*
      Service function that makes unque IDs
  */

  LxSquareSelector.prototype.uniqueid = function(len) {
    var ascicode, idstr;
    idstr = String.fromCharCode(Math.floor((Math.random() * 25) + 65));
    while (true) {
      ascicode = Math.floor((Math.random() * 42) + 48);
      if (ascicode < 58 || ascicode > 64) {
        idstr += String.fromCharCode(ascicode);
      }
      if (!(idstr.length < len)) {
        break;
      }
    }
    return idstr;
  };

  function LxSquareSelector(options) {
    this.properties = $.extend({
      list: [],
      list_header: null,
      list_footer: null,
      list_align: "center",
      list_width: 200,
      custom_item: null,
      class_name: "",
      title: "",
      subtitle: "",
      container: "body",
      active: "",
      callback: null
    }, options);
    this.container = $(this.properties.container);
    if (!this.container.length) {
      throw "Container for selector not found!";
    }
    this.id = "ss-" + new Date().getTime() + "-" + this.uniqueid(4);
    this.selector = null;
    this.list = null;
    this.list_container = null;
    this.title = null;
    this.subtitle = null;
    this.current_value_item = null;
    this.value = null;
    this.init();
  }

  LxSquareSelector.prototype.init = function() {
    var list_width2, s, square_size2;
    if ($(this.container).find(this.id).length) {
      return true;
    }
    s = this._constructSelector();
    $(this.container).append(s);
    this.selector = $(this.container).find("#" + this.id);
    if (!this.selector.length) {
      throw "Selector not found!";
    }
    this.list_container = $(this.selector).find(".square-list");
    this.list = $(this.list_container).find("li");
    this.list_top_arrow = $(this.list_container).find("span.top-arrow");
    this.title = $(this.selector).find(".ss-title");
    this.subtitle = $(this.selector).find(".ss-subtitle");
    this.current_value_item = $(this.selector).find(".ss-value");
    this.list_container.width(this.properties.list_width + "px");
    square_size2 = Math.floor(this.selector.width() / 2);
    list_width2 = Math.floor(this.list_container.width() / 2) + 8;
    if (this.properties.list_align === "left") {
      this.list_container.css({
        left: "-4px",
        right: "auto"
      });
      this.list_top_arrow.css({
        left: square_size2 + "px",
        right: "auto"
      });
    }
    if (this.properties.list_align === "right") {
      this.list_container.css({
        right: "-4px",
        left: "auto"
      });
      this.list_top_arrow.css({
        right: square_size2 + "px",
        left: "auto"
      });
    }
    if (this.properties.list_align === "center") {
      this.list_container.css({
        left: "-" + (list_width2 - square_size2) + "px",
        right: "auto"
      });
      this.list_top_arrow.css({
        left: (list_width2 - 8) + "px",
        right: "auto"
      });
    }
    this.actualize();
    this._attachHandlers();
    return true;
  };

  /*
    Set selector display value according to given one
    @param [value]
  */


  LxSquareSelector.prototype.actualize = function(value) {
    var i, search_value;
    search_value = value;
    if (typeof value === "undefined") {
      search_value = this.properties.active;
    }
    i = 0;
    search_value = search_value.toString();
    while (i < this.properties.list.length) {
      if (this.properties.list[i].value.toString() === search_value) {
        $(this.current_value_item).html(this.properties.list[i].display);
        $(this.list).removeClass("active");
        $(this.list).filter("[data-value='" + search_value + "']").addClass("active");
        this.properties.active = search_value;
        this.value = search_value;
        return true;
      }
      i++;
    }
    throw "Value [" + value + "] not found!";
  };

  /*
      Return current state
  */


  LxSquareSelector.prototype.disabled = function() {
    return $(this.selector).hasClass('disabled');
  };

  /*
      Disable button
  */


  LxSquareSelector.prototype.enable = function() {
    return $(this.selector).removeClass('disabled');
  };

  /*
      Enable button
  */


  LxSquareSelector.prototype.disable = function() {
    return $(this.selector).addClass('disabled');
  };

  /*
      Find item by it's value
  */


  LxSquareSelector.prototype._findItemByValue = function(value) {
    var i;
    value = value.toString();
    i = 0;
    while (i < this.properties.list.length) {
      if (this.properties.list[i].value.toString() === value) {
        return i;
      }
      i++;
    }
    return -1;
  };

  /*
      Get state of item in the list
  */


  LxSquareSelector.prototype.itemDisabled = function(value) {
    var i;
    i = this._findItemByValue(value);
    if (i >= 0) {
      if (this.properties.list[i].disabled === true) {
        return true;
      } else {
        return false;
      }
    } else {
      throw "Value [" + value + "] not found!";
    }
  };

  /*
     Disable item
  */


  LxSquareSelector.prototype.disableItem = function(value) {
    var i;
    i = this._findItemByValue(value);
    if (i >= 0) {
      this.properties.list[i].disabled = true;
      $(this.selector).find('li[data-value="' + value.toString() + '"]').addClass('disabled');
      return true;
    } else {
      throw "Value [" + value + "] not found!";
    }
  };

  /*
     Enable item
  */


  LxSquareSelector.prototype.enableItem = function(value) {
    var i;
    i = this._findItemByValue(value);
    if (i >= 0) {
      this.properties.list[i].disabled = false;
      $(this.selector).find('li[data-value="' + value.toString() + '"]').removeClass('disabled');
      return true;
    } else {
      throw "Value [" + value + "] not found!";
    }
  };

  /*
      Rebuild whole thing
  */


  LxSquareSelector.prototype.rebuild = function(list, active_value) {
    var s;
    this.properties.list = $.extend(list, []);
    this.properties.active = active_value;
    $(this.selector).empty();
    s = this._constructSelector(true);
    $(this.selector).html(s);
    this.list_container = $(this.selector).find(".square-list");
    this.list = $(this.list_container).find("li");
    this.list_top_arrow = $(this.list_container).find("span.top-arrow");
    this.title = $(this.selector).find(".ss-title");
    this.subtitle = $(this.selector).find(".ss-subtitle");
    this.current_value_item = $(this.selector).find(".ss-value");
    this.actualize();
    return this._attachHandlers();
  };

  /*
    Construct the selector html
    @returns {string}
    @private
  */


  LxSquareSelector.prototype._constructSelector = function(only_inner) {
    var i, s;
    s = "";
    if (typeof only_inner === 'undefined') {
      only_inner = false;
    }
    if (!only_inner) {
      s += "<div class='square-select";
      if (typeof this.properties.class_name !== "undefined") {
        s += " " + this.properties.class_name;
      }
      if (this.properties.disabled) {
        s += " disabled";
      }
      s += "' data-title='" + this.properties.title + "' id='" + this.id + "'>";
    }
    if (typeof this.properties.title !== "undefined") {
      s += "<span class='ss-title'>" + this.properties.title + "</span>";
    }
    if (this.properties.list.length > 1) {
      s += "<i class='triangle'></i>";
    }
    s += "<a href='#' class='ss-value' tabindex='0'></a>";
    if (typeof this.properties.subtitle !== "undefined") {
      s += "<span class='ss-subtitle'>" + this.properties.subtitle + "</span>";
    }
    if (this.properties.custom_item) {
      s += this.properties.custom_item;
    }
    s += "<div class='square-list'>";
    s += "<span class='top-arrow'></span>";
    if (this.properties.list_header) {
      s += "<p class='ss-header'>" + this.properties.list_header + "</p>";
    }
    if (this.properties.list.length > 1) {
      s += "<ul>";
      i = 0;
      while (i < this.properties.list.length) {
        s += "<li data-value='" + this.properties.list[i].value + "' data-display='" + this.properties.list[i].display + "' class='";
        if (this.properties.list[i].value === this.properties.active) {
          s += "active";
        }
        if (this.properties.list[i].disabled) {
          s += " disabled";
        }
        if (this.properties.list[i].separated) {
          s += " separated";
        }
        s += "'>";
        s += "<a href='#'>";
        s += this.properties.list[i].line ? this.properties.list[i].line : this.properties.list[i].display;
        s += "</a>";
        s += "</li>";
        i++;
      }
      s += "</ul>";
    }
    if (this.properties.list_footer) {
      s += "<p class='ss-footer'>" + this.properties.list_footer + "</p>";
    }
    s += "</div>";
    if (!only_inner) {
      s += "</div>";
    }
    return s;
  };

  /*
    Set handlers
    @private
  */


  LxSquareSelector.prototype._attachHandlers = function() {
    var selector;
    selector = this;
    $(this.list).find("a").unbind().click(function(e) {
      var value;
      e.preventDefault();
      if ($(selector.selector).hasClass('disabled')) {
        return false;
      }
      if ($(this).parent().hasClass('disabled')) {
        return false;
      }
      value = $(this).parent().data("value");
      if (typeof selector.properties.callback === "function") {
        selector.properties.callback(value);
      }
      selector.actualize(value);
      $(selector.selector).removeClass("ss-open");
      $(selector.current_value_item).focus();
      return false;
    });
    if (this.properties.list.length > 1) {
      $(this.selector).unbind().click(function(e) {
        e.preventDefault();
        if ($(selector.selector).hasClass('disabled')) {
          return false;
        }
        if ($(this).hasClass("ss-open")) {
          $(this).removeClass("ss-open");
        } else {
          $(".ss-open").removeClass("ss-open");
          $(this).addClass("ss-open");
        }
        return false;
      });
      $(this.selector).hover(null, function() {
        return $(this).removeClass("ss-open");
      });
      return $(this.current_value_item).unbind().click(function(e) {
        e.preventDefault();
        $(this).parent().trigger("click");
        return false;
      });
    } else {
      return $(this.selector).unbind().click(function(e) {
        e.preventDefault();
        if (typeof selector.properties.callback === "function") {
          selector.properties.callback(selector.properties.active);
        }
        return false;
      });
    }
  };

  return LxSquareSelector;

})();

$(function() {
  return $(document).keydown(function(e) {
    var focused_item, handled, list, selector;
    focused_item = void 0;
    selector = $(".square-select.ss-open");
    handled = false;
    if ($(selector).hasClass('disabled')) {
      $(selector).removeClass("ss-open");
      return false;
    }
    if (!selector.length) {
      focused_item = document.activeElement;
      if (focused_item && ($(focused_item).hasClass("ss-value"))) {
        if ((e.which === 32) || (e.which === 40)) {
          $(focused_item).parent().trigger("click");
          handled = true;
        }
      }
    }
    if (!handled) {
      list = $(selector).find(".square-list a");
      focused_item = $(list).filter("a:focus");
      if (!focused_item.length) {
        focused_item = $(selector).find("li.active").find("a");
      }
      if (!focused_item.length) {
        focused_item = $(list).first();
      }
      if (e.which === 38) {
        $(focused_item).parent().prev().find("a").focus();
        handled = true;
      }
      if (e.which === 40) {
        $(focused_item).parent().next().find("a").focus();
        handled = true;
      }
      if (e.which === 27) {
        $(selector).removeClass("ss-open");
        $(selector).find(".ss-value").focus();
        handled = true;
      }
    }
    if (handled) {
      e.cancelBubble = true;
      if (e.stopPropagation) {
        e.stopPropagation();
      }
      return false;
    }
    return true;
  });
});
